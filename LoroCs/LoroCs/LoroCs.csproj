<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <LangVersion>Latest</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <RustBuildConfiguration>debug</RustBuildConfiguration>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <RustBuildConfiguration>release</RustBuildConfiguration>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="PolySharp" Version="1.15.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <AvailableItemName Include="RustFiles" />
  </ItemGroup>

  <ItemGroup>
    <RustFiles Include="..\..\loro\*" Link="loro-cs\%(RecursiveDir)%(Filename)%(Extension)" />
    <RustFiles Include="..\..\loro\src\**" Link="loro-cs\src\%(RecursiveDir)%(Filename)%(Extension)" />
    <UpToDateCheckInput Include="@(RustFiles)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Add the generated Loro.cs file to the project if it is available. This eases development -->
    <Compile Include="$(IntermediateOutputPath)/loro/loro*.cs" Link="generated/%(Filename)%(Extension)" />
  </ItemGroup>

  <Target Name="BuildLoroBindings" BeforeTargets="PreBuildEvent">
    <Message Text="Checking whether uniffi-bindgen-cs is already installed in the correct version" />
    <Exec
      Command="powershell -NoProfile -Command &quot;if (cargo install --list | Select-String 'uniffi-bindgen-cs.*\(https://github.com/NordSecurity/uniffi-bindgen-cs\?tag=v0\.9\.1\+v0\.28\.3#') { exit 0 } else { exit 1 }&quot;"
      IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="UniffiInstalled" />
    </Exec>

    <Message Condition="'$(UniffiInstalled)' != '0'" Text="Installing uniffi-bindgen-cs as it appears not to be installed in the correct version yet" />
    <Message Condition="'$(UniffiInstalled)' == '0'" Text="uniffi-bindgen-cs is already installed in the correct version - no need to install" />
    <Exec Condition="'$(UniffiInstalled)' != '0'" Command="cargo install --git https://github.com/NordSecurity/uniffi-bindgen-cs --tag v0.9.1+v0.28.3" />

    <!-- Detect platform and architecture to select the correct native library for uniffi-bindgen-cs -->
    <PropertyGroup>
      <!-- Platform detection -->
      <_IsWindows Condition=" '$(OS)' == 'Windows_NT' ">true</_IsWindows>
      <_IsMac Condition=" '$(OS)' != 'Windows_NT' and Exists('/usr/bin/sw_vers') ">true</_IsMac>
      <_IsLinux Condition=" '$(OS)' != 'Windows_NT' and !Exists('/usr/bin/sw_vers') ">true</_IsLinux>

      <!-- Architecture detection -->
      <_IsX64 Condition=" '$(PROCESSOR_ARCHITECTURE)' == 'AMD64' or '$(PROCESSOR_ARCHITECTURE)' == 'x86_64' ">true</_IsX64>
      <_IsX86 Condition=" '$(PROCESSOR_ARCHITECTURE)' == 'x86' or '$(PROCESSOR_ARCHITECTURE)' == 'i686' ">true</_IsX86>
      <_IsArm64 Condition=" '$(PROCESSOR_ARCHITECTURE)' == 'ARM64' or '$(PROCESSOR_ARCHITECTURE)' == 'aarch64' or '$(PROCESSOR_ARCHITECTURE)' == 'arm64' ">true</_IsArm64>

      <!-- Set library path and type based on detected platform and architecture -->
      <!-- Windows -->
      <_UniffiLibPath Condition=" $(_IsWindows) == 'true' and $(_IsX64) == 'true' and Exists('..\..\artifacts\loro-cs-x86_64-pc-windows-msvc\loro.dll') ">../../artifacts/loro-cs-x86_64-pc-windows-msvc/loro.dll</_UniffiLibPath>
      <_UniffiLibPath Condition=" $(_IsWindows) == 'true' and $(_IsX86) == 'true' and Exists('..\..\artifacts\loro-cs-i686-pc-windows-msvc\loro.dll') ">../../artifacts/loro-cs-i686-pc-windows-msvc/loro.dll</_UniffiLibPath>
      <_UniffiLibPath Condition=" $(_IsWindows) == 'true' and $(_IsArm64) == 'true' and Exists('..\..\artifacts\loro-cs-aarch64-pc-windows-msvc\loro.dll') ">../../artifacts/loro-cs-aarch64-pc-windows-msvc/loro.dll</_UniffiLibPath>
      <_UniffiLibType Condition=" $(_IsWindows) == 'true' and ( $(_IsX64) == 'true' or $(_IsX86) == 'true' or $(_IsArm64) == 'true' ) ">--library</_UniffiLibType>

      <!-- Linux -->
      <_UniffiLibPath Condition=" $(_IsLinux) == 'true' and $(_IsX64) == 'true' and Exists('..\..\artifacts\loro-cs-x86_64-unknown-linux-gnu\loro.so') ">../../artifacts/loro-cs-x86_64-unknown-linux-gnu/loro.so</_UniffiLibPath>
      <_UniffiLibPath Condition=" $(_IsLinux) == 'true' and $(_IsX86) == 'true' and Exists('..\..\artifacts\loro-cs-i686-unknown-linux-gnu\loro.so') ">../../artifacts/loro-cs-i686-unknown-linux-gnu/loro.so</_UniffiLibPath>
      <_UniffiLibPath Condition=" $(_IsLinux) == 'true' and $(_IsArm64) == 'true' and Exists('..\..\artifacts\loro-cs-aarch64-unknown-linux-gnu\loro.so') ">../../artifacts/loro-cs-aarch64-unknown-linux-gnu/loro.so</_UniffiLibPath>
      <_UniffiLibType Condition=" $(_IsLinux) == 'true' and ( $(_IsX64) == 'true' or $(_IsX86) == 'true' or $(_IsArm64) == 'true' ) ">--library</_UniffiLibType>

      <!-- macOS -->
      <_UniffiLibPath Condition=" $(_IsMac) == 'true' and $(_IsX64) == 'true' and Exists('..\..\artifacts\loro-cs-x86_64-apple-darwin\loro.dylib') ">../../artifacts/loro-cs-x86_64-apple-darwin/loro.dylib</_UniffiLibPath>
      <_UniffiLibPath Condition=" $(_IsMac) == 'true' and $(_IsArm64) == 'true' and Exists('..\..\artifacts\loro-cs-aarch64-apple-darwin\loro.dylib') ">../../artifacts/loro-cs-aarch64-apple-darwin/loro.dylib</_UniffiLibPath>
      <_UniffiLibType Condition=" $(_IsMac) == 'true' and ( $(_IsX64) == 'true' or $(_IsArm64) == 'true' ) ">--library</_UniffiLibType>
    </PropertyGroup>

    <Message Condition=" '$(_UniffiLibPath)' != '' " Text="Running uniffi-bindgen-cs for $(_UniffiLibPath)" />
    <Exec Condition=" '$(_UniffiLibPath)' != '' " Command="uniffi-bindgen-cs -o $(IntermediateOutputPath)/loro --no-format $(_UniffiLibPath) $(_UniffiLibType)" />

    <Message Condition=" '$(_UniffiLibPath)' == '' " Importance="high" Text="WARNING: No matching platform/artifact found for uniffi-bindgen-cs. No bindings will be generated. IsWindows:$(_IsWindows) IsMac:$(_IsMac) IsLinux:$(_IsLinux) IsX64:$(_IsX64) IsX86:$(_IsX86) IsArm64:$(_IsArm64)" />

    <ItemGroup>
      <!-- ensure the loro.cs file is included - even when it was just created by the cargo build
      above and avoid double entries -->
      <Compile Remove="$(IntermediateOutputPath)/loro/loro*.cs" />
      <Compile Include="$(IntermediateOutputPath)/loro/loro.cs" Link="generated/%(Filename)%(Extension)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>LoroCs</PackageId>
    <Version>0.1.0</Version>
    <Authors>Simon Ensslen;RenewedVision</Authors>
    <Description>LoroCs .NET bindings with native loro_cs.dll from Rust</Description>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <RepositoryUrl>https://github.com/sensslen/loro-cs</RepositoryUrl>
    <PackageTags>Loro</PackageTags>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IsPackable>true</IsPackable>
  </PropertyGroup>

  <!-- Include native dependencies when available (these are built by the CI pipeline) -->
  <ItemGroup>
    <!-- Windows -->
    <None Include="..\..\artifacts\loro-cs-x86_64-pc-windows-msvc\loro.dll" Pack="true" PackagePath="runtimes/win-x64/native/" Condition="Exists('..\..\artifacts\loro-cs-x86_64-pc-windows-msvc\loro.dll')" />
    <None Include="..\..\artifacts\loro-cs-x86_64-pc-windows-msvc\loro.pdb" Pack="true" PackagePath="runtimes/win-x64/native/" Condition="Exists('..\..\artifacts\loro-cs-x86_64-pc-windows-msvc\loro.pdb')" />
    <None Include="..\..\artifacts\loro-cs-i686-pc-windows-msvc\loro.dll" Pack="true" PackagePath="runtimes/win-x86/native/" Condition="Exists('..\..\artifacts\loro-cs-i686-pc-windows-msvc\loro.dll')" />
    <None Include="..\..\artifacts\loro-cs-i686-pc-windows-msvc\loro.pdb" Pack="true" PackagePath="runtimes/win-x86/native/" Condition="Exists('..\..\artifacts\loro-cs-i686-pc-windows-msvc\loro.pdb')" />
    <None Include="..\..\artifacts\loro-cs-aarch64-pc-windows-msvc\loro.dll" Pack="true" PackagePath="runtimes/win-arm64/native/" Condition="Exists('..\..\artifacts\loro-cs-aarch64-pc-windows-msvc\loro.dll')" />
    <None Include="..\..\artifacts\loro-cs-aarch64-pc-windows-msvc\loro.pdb" Pack="true" PackagePath="runtimes/win-arm64/native/" Condition="Exists('..\..\artifacts\loro-cs-aarch64-pc-windows-msvc\loro.pdb')" />
    <!-- Linux -->
    <None Include="..\..\artifacts\loro-cs-x86_64-unknown-linux-gnu\loro.so" Pack="true" PackagePath="runtimes/linux-x64/native/" Condition="Exists('..\..\artifacts\loro-cs-x86_64-unknown-linux-gnu\loro.so')" />
    <None Include="..\..\artifacts\loro-cs-i686-unknown-linux-gnu\loro.so" Pack="true" PackagePath="runtimes/linux-x86/native/" Condition="Exists('..\..\artifacts\loro-cs-i686-unknown-linux-gnu\loro.so')" />
    <None Include="..\..\artifacts\loro-cs-aarch64-unknown-linux-gnu\loro.so" Pack="true" PackagePath="runtimes/linux-arm64/native/" Condition="Exists('..\..\artifacts\loro-cs-aarch64-unknown-linux-gnu\loro.so')" />
    <!-- macOS -->
    <None Include="..\..\artifacts\loro-cs-x86_64-apple-darwin\loro.dylib" Pack="true" PackagePath="runtimes/osx-x64/native/" Condition="Exists('..\..\artifacts\loro-cs-x86_64-apple-darwin\loro.dylib')" />
    <None Include="..\..\artifacts\loro-cs-aarch64-apple-darwin\loro.dylib" Pack="true" PackagePath="runtimes/osx-arm64/native/" Condition="Exists('..\..\artifacts\loro-cs-aarch64-apple-darwin\loro.dylib')" />
  </ItemGroup>  
  
  <ItemGroup>
    <Content Include="..\..\README.md">
      <Pack>true</Pack>
      <PackagePath>README.md</PackagePath>
    </Content>
  </ItemGroup>

</Project>