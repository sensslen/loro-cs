<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <LangVersion>Latest</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="PolySharp" Version="1.15.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <AvailableItemName Include="RustFiles" />
  </ItemGroup>

  <ItemGroup>
    <RustFiles Include="..\..\loro-cs\*" Link="loro-cs\%(RecursiveDir)%(Filename)%(Extension)" />
    <RustFiles Include="..\..\loro-cs\src\**" Link="loro-cs\src\%(RecursiveDir)%(Filename)%(Extension)" />
    <UpToDateCheckInput Include="@(RustFiles)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Add the generated Loro.cs file to the project if it is available. This eases development -->
    <Compile Include="$(IntermediateOutputPath)/loro/loro*.cs" Link="generated/%(Filename)%(Extension)" />
  </ItemGroup>

  <Target Name="BuildLoroBindings" BeforeTargets="PreBuildEvent">
    <Message Text="Checking whether uniffi-bindgen-cs is already installed in the correct version" />
    <Exec
      Command="powershell -NoProfile -Command &quot;if (cargo install --list | Select-String 'uniffi-bindgen-cs.*\(https://github.com/NordSecurity/uniffi-bindgen-cs\?tag=v0\.9\.1\+v0\.28\.3#') { exit 0 } else { exit 1 }&quot;"
      IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="UniffiInstalled" />
    </Exec>

    <Message Condition="'$(UniffiInstalled)' != '0'" Text="Installing uniffi-bindgen-cs as it appears not to be installed in the correct version yet" />
    <Message Condition="'$(UniffiInstalled)' == '0'" Text="uniffi-bindgen-cs is already installed in the correct version - no need to install" />
    <Exec Condition="'$(UniffiInstalled)' != '0'" Command="cargo install --git https://github.com/NordSecurity/uniffi-bindgen-cs --tag v0.9.1+v0.28.3" />

    <Exec Command="uniffi-bindgen-cs -o $(IntermediateOutputPath)/loro -c ../../loro-cs/uniffi.toml --no-format ../../loro-cs/src/loro.udl" />

    <ItemGroup>
      <!-- ensure the loro.cs file is included - even when it was just created by the cargo build
      above and avoid double entries -->
      <Compile Remove="$(IntermediateOutputPath)/loro/loro*.cs" />
      <Compile Include="$(IntermediateOutputPath)/loro/loro.cs" Link="generated/%(Filename)%(Extension)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>LoroCs</PackageId>
    <Version>0.1.0</Version>
    <Authors>Simon Ensslen;RenewedVision</Authors>
    <Description>LoroCs .NET bindings with native loro_cs.dll from Rust</Description>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <RepositoryUrl>https://github.com/sensslen/loro-cs</RepositoryUrl>
    <PackageTags>Loro</PackageTags>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IsPackable>true</IsPackable>
  </PropertyGroup>

  <!-- Include native dependencies when available (these are built by the CI pipeline) -->
  <ItemGroup>
    <!-- Windows -->
    <None Include="..\..\artifacts\loro_cs-win-x64\loro_cs.dll" Pack="true" PackagePath="runtimes/win-x64/native/" Condition="Exists('..\..\artifacts\loro_cs-win-x64\loro_cs.dll')" />
    <None Include="..\..\artifacts\loro_cs-win-x86\loro_cs.dll" Pack="true" PackagePath="runtimes/win-x86/native/" Condition="Exists('..\..\artifacts\loro_cs-win-x86\loro_cs.dll')" />
    <None Include="..\..\artifacts\loro_cs-win-arm64\loro_cs.dll" Pack="true" PackagePath="runtimes/win-arm64/native/" Condition="Exists('..\..\artifacts\loro_cs-win-arm64\loro_cs.dll')" />
    <!-- Linux -->
    <None Include="..\..\artifacts\loro_cs-linux-x64\loro_cs.so" Pack="true" PackagePath="runtimes/linux-x64/native/" Condition="Exists('..\..\artifacts\loro_cs-linux-x64\loro_cs.so')" />
    <None Include="..\..\artifacts\loro_cs-linux-x86\loro_cs.so" Pack="true" PackagePath="runtimes/linux-x86/native/" Condition="Exists('..\..\artifacts\loro_cs-linux-x86\loro_cs.so')" />
    <None Include="..\..\artifacts\loro_cs-linux-arm64\loro_cs.so" Pack="true" PackagePath="runtimes/linux-arm64/native/" Condition="Exists('..\..\artifacts\loro_cs-linux-arm64\loro_cs.so')" />
    <!-- macOS -->
    <None Include="..\..\artifacts\loro_cs-osx-x64\loro_cs.dylib" Pack="true" PackagePath="runtimes/osx-x64/native/" Condition="Exists('..\..\artifacts\loro_cs-osx-x64\loro_cs.dylib')" />
    <None Include="..\..\artifacts\loro_cs-osx-arm64\loro_cs.dylib" Pack="true" PackagePath="runtimes/osx-arm64/native/" Condition="Exists('..\..\artifacts\loro_cs-osx-arm64\loro_cs.dylib')" />
  </ItemGroup>  
  
  <ItemGroup>
    <Content Include="..\..\README.md">
      <Pack>true</Pack>
      <PackagePath>README.md</PackagePath>
    </Content>
  </ItemGroup>

</Project>